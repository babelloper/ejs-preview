---
pageName: EJS-BOILERPLATE
title: EJS-BOILERPLATE
description: EJS-BOILERPLATE
pageId: EJS-BOILERPLATE
charset: utf-8
styles:
  - /styles/common/common.css
scripts:
  - /scripts/libs/jquery/jquery.min.js
  - /scripts/common/common.js
indexGroup: example04
state:
  default: section 2
---

<!doctype html>
<html lang="<%= lang %>">
  <head>
    <%- include('/components/_head'); %>
    <script>
      // 1) forEach
        // forEach: for문 돌리는거랑 같은 개념.
        Array.prototype.forEach(callback[, thisArg])
        // callback : function(currentValue[, index[, originalArray]]);
        // - currentValue : 현재값  (필수)
        // - index : 현재 인덱스
        // - originalArray : 원본 배열
        // thisArg : this에 할당할 대상. 생략시 global 객체

        const a = [1, 2, 3];
        a.forEach(function (v, i, arr) {
          console.log(v, i, arr, this);
        }, [10, 11, 12]);

      // 2) map
        // map: for문을 돌려서 새로운 배열을 만드는 목적.(forEach의 하위 개념). return 필수
        Array.prototype.map(callback[, thisArg])
        // callback : function(currentValue[, index[, originalArray]]);
        // - currentValue : 현재값  (필수)
        // - index : 현재 인덱스
        // - originalArray : 원본 배열
        // thisArg : this에 할당할 대상. 생략시 global 객체
        
        const a = [1, 2, 3];
        const b = a.map(function (v, i, arr) {
          console.log(v, i, arr, this);
          return this[0] + v;
        }, [10]);
        // 1 0 // 배열1  i=0
        // 2 1 // 배열2  i=1
        // 3 2 // 배열3  i=2

        // this 0번째 인자와 v=1을 더함
        // this 0번째 인자와 v=2를 더함
        // this 0번째 인자와 v=3을 더함

        // b  // [11, 12, 13] // [10+1, 10+2, 10+3]

      // 3) reduce
        // reduce: for문을 돌려서 최종적으로 다른 '무언가'를 만드는 목적. (map보다 하위 개념). return 필수
      Array.prototype.reduce(callback[, initialValue])
        // initialValue : 초기값. 생략시 첫번째 인자가 자동 지정되며, 이 경우 currentValue는 두번째 인자부터 배정된다.
        // callback : function(accumulator, currentVAlue[, currentIndex[, originalArrya]]);
        // - currentValue : 누적된 계산값  (필수)
        // - currentValue : 현재값  (필수)
        // - currentIndex : 현재 인덱스
        // - originalArray : 원본 배열
        
        const arr = [1, 2, 3];
        const res = arr.reduce(function (p, c, i) {
          console.log(p, c, i);
          return p + c;
        }, 10);

        // 10 1 0 // p에 10이 들어간 상태로 c에는 배열 1이 들어감 0 = i
        // 11 2 1
        // 13 3 2

        res;
        // 최종 결과 16 = 10 + 1 + 2 + 3

        // 위 예제와 다르게 initialValue 10을 없애보면
        const arr = [1, 2, 3];
        const res = arr.reduce(function (p, c, i) {
          console.log(p, c, i);
          return p + c;
        });
        // 1 2 1  // p에 배열 넣고
        // 3 3 2
        // 순회를 두번밖에 안 함
        // initialValue[10]이 없으면
        res;
        // 6

        // reduce를 사용하면 좋다!
        const a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
        let res = 0;
        for(let b = 0; b < a.length; b++) {
          res += a[b];
        }
        // 55
        // 아래로 개선

        const res = a.reduce(function(a, c) {return a + c});
        res;
        // 55
        // 아래로 개선

        const res2 = a.reduce((a, c) => a + c);
        res;
        // 55





        const arr = [1, 2, 3, 4];
        const str = arr.reduce(function (res, item, index, array) {
          return res + item
        }, '')
        console.log(str);


        //배열의 모든 메소드는 중요한 순거로 나열되어있다(앞일수록 중요함)
        $('li').each(function(index, item) { });
        [1, 2, 3].forEach(function (item, index) {});
        // index보다 item값을 중요시 한다

        // forEach: for문 돌리는거랑 같은 개념.
        // map: for문을 돌려서 새로운 배열을 만드는 목적.(forEach의 하위 개념). return 필수
        // reduce: for문을 돌려서 최종적으로 다른 무언가를 만드는 목적. (map보다 하위 개념). return 필수






    </script>
  </head>

  <body id="<%= page.pageId %>">

    <%- include('/components/_scripts'); %>
  </body>
</html>
